package edu.illinois.cs.cogcomp.illinoisRE.data;

import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

import org.apache.thrift.TException;

import edu.illinois.cs.cogcomp.core.datastructures.Pair;
import edu.illinois.cs.cogcomp.core.io.LineIO;
import edu.illinois.cs.cogcomp.edison.data.curator.TokenAligner;
import edu.illinois.cs.cogcomp.edison.sentences.Constituent;
import edu.illinois.cs.cogcomp.edison.sentences.PredicateArgumentView;
import edu.illinois.cs.cogcomp.edison.sentences.Relation;
import edu.illinois.cs.cogcomp.edison.sentences.SpanLabelView;
import edu.illinois.cs.cogcomp.edison.sentences.TextAnnotation;
import edu.illinois.cs.cogcomp.edison.sentences.ViewNames;
import edu.illinois.cs.cogcomp.illinoisRE.common.Constants;
import edu.illinois.cs.cogcomp.illinoisRE.common.Document;
import edu.illinois.cs.cogcomp.illinoisRE.common.IOManager;
import edu.illinois.cs.cogcomp.illinoisRE.data.ace.ACEDataHandler;
import edu.illinois.cs.cogcomp.illinoisRE.data.ace.Ace05Mention;
import edu.illinois.cs.cogcomp.illinoisRE.data.ic.CleanICDoc;
import edu.illinois.cs.cogcomp.illinoisRE.data.ic.CleanTextManager;
import edu.illinois.cs.cogcomp.illinoisRE.data.ic.Mention;
import edu.illinois.cs.cogcomp.illinoisRE.data.ic.SemanticRelation;
import edu.illinois.cs.cogcomp.illinoisRE.main.FilePathManager;
import edu.illinois.cs.cogcomp.illinoisRE.mention.MentionDetector;
import edu.illinois.cs.cogcomp.thrift.base.AnnotationFailedException;
import edu.illinois.cs.cogcomp.thrift.base.Labeling;
import edu.illinois.cs.cogcomp.thrift.base.ServiceUnavailableException;
import edu.illinois.cs.cogcomp.thrift.base.Span;

public class DataLoader {

	// protected MyCuratorClient curator = new MyCuratorClient(
	// "grandpa.cs.uiuc.edu", 9090, false);

	protected static MyCuratorClient curator = new MyCuratorClient(
			"grandpa.cs.uiuc.edu", 9010);

	/**
	 * 
	 * @param masterfilename
	 * @return
	 * @throws FileNotFoundException
	 */
	public static List<Document> getACEDocuments(String masterfilename)
			throws FileNotFoundException {
		List<Document> docs = new ArrayList<Document>();
		ArrayList<String> files = IOManager.readLines(masterfilename);

		for (String file : files) {
			System.out.println(file);

			Document myDoc = annotateACEText(FilePathManager.getProjectRoot()
					+ file);
			if (myDoc != null)
				docs.add(myDoc);
		}

		return docs;
	}

	/**
	 * 
	 * @param filename
	 *            a file contains a list of files (relative path)
	 * @return
	 */
	public static List<Document> getICDocuments(String filename, String xmlDir,
			String srcDir, String outDir) {
		return readICDocuments(filename, xmlDir, srcDir, outDir);
	}

	private static List<Document> readICDocuments(String filename,
			String xmlDir, String srcDir, String outDir) {

		List<Document> docs = new ArrayList<Document>();
		ArrayList<String> files = IOManager.readLines(filename);

		for (String file : files) {
			System.out.println(file);
			Document myDoc = annotateICDocument(file, xmlDir, srcDir, outDir);
			if (myDoc != null)
				docs.add(myDoc);
		}

		return docs;
	}

	/**
	 * @param outDir
	 * @param srcDir
	 * @param xmlDir
	 * @param xmlFile
	 * @return
	 */
	private static Document annotateICDocument(String file, String xmlDir,
			String srcDir, String outDir) {
		CleanICDoc doc = readICData(file, xmlDir, srcDir, outDir);
		return annotateICText(doc);
	}

	public static Document annotateACEText(String filename) {
		TextAnnotation res;

		String sgmFile = filename + ".sgm";
		String xmlFile = filename + ".apf.xml";

		// Reading SGM file
		StringBuffer sgm = ACEDataHandler.readingSgmFile(sgmFile);

		// System.out.println(sgm.toString());
		// System.out.println();

		String cleanSgm = ACEDataHandler.removeXMLTags(sgm);
		String cpCleanSgm = new String(cleanSgm);

		// System.out.println(cleanSgm);

		// Reading mentions from the XML file
		ArrayList<String> xmlLines = IOManager.readLines(xmlFile);
		List<Ace05Mention> mentions = ACEDataHandler
				.analyzeAnnotatedLines(xmlLines);

		ACEDataHandler.sortAce05MentionDes(mentions);

		int n = mentions.size();
		int i = 0;
		while (i < n) {
			Ace05Mention m = mentions.get(i);

			// Extents
			int endExtent = m.endExtent;
			int startExtent = m.startExtent;
			cleanSgm = cleanSgm.substring(0, endExtent + 1) + "</m_" + m.type
					+ "_" + m.id + "_m>" + cleanSgm.substring(endExtent + 1);
			cleanSgm = cleanSgm.substring(0, startExtent) + "<m_" + m.type
					+ "_" + m.id + "_m>" + cleanSgm.substring(startExtent);

			// Heads
			/*
			 * int endHead = m.endHead; cpCleanSgm = cpCleanSgm.substring(0,
			 * endHead + 1) + "</m_" + m.type + "_" + m.id + "_m>" +
			 * cpCleanSgm.substring(endHead + 1); cpCleanSgm =
			 * cpCleanSgm.substring(0, startExtent) + "<m_" + m.type + "_" +
			 * m.id + "_m>" + cpCleanSgm.substring(startExtent);
			 */

			ACEDataHandler.modifyOffset(mentions, i);
			i++;
		}

		cleanSgm = cleanSgm.trim();
		cleanSgm = cleanSgm.replaceAll("\\s\\s+", " ");

		cpCleanSgm = cpCleanSgm.trim();
		cpCleanSgm = cpCleanSgm.replaceAll("\\s\\s+", " ");

		// System.out.println();
		// System.out.println(cleanSgm);
		// System.out.println();

		String text = ACEDataHandler.cleanMentionTags(cleanSgm);

		List<Ace05Mention> newMentions = ACEDataHandler
				.getMentionsFromMentionTags(cleanSgm);
		List<Span> spanExtents = new ArrayList<Span>();
		for (Ace05Mention m : newMentions) {
			Span span = new Span(m.startExtent, m.endExtent);
			span.label = m.type;
			spanExtents.add(span);
		}

		Labeling extentLabels = new Labeling();
		extentLabels.setRawText(text);
		extentLabels.setLabels(spanExtents);

		TextAnnotation ta = null;
		// -----------------
		try {
			boolean forceUpdate = false;
			ta = curator
					.getTextAnnotation("ACE05", filename, text, forceUpdate);
			curator.addStanfordParse(ta, forceUpdate);
			curator.addPOSView(ta, forceUpdate);
			curator.addChunkView(ta, forceUpdate);
			curator.addNamedEntityView(ta, forceUpdate);
			// curator.addNumericalQuantitiesView(ta, forceUpdate);

		} catch (Exception e) {
			e.printStackTrace();
		}

		SpanLabelView goldTypedView = alignLabelingToSpans(
				Constants.GOLD_ACE_MENTION_VIEW, ta, extentLabels);

		ta.addView(Constants.GOLD_ACE_MENTION_VIEW, goldTypedView);

		return new Document(ta);

	}

	protected static SpanLabelView alignLabelingToSpans(String viewName,
			TextAnnotation ta, Labeling spanLabeling) {
		List<Span> labels = spanLabeling.getLabels();
		double score = spanLabeling.getScore();
		String generator = spanLabeling.getSource();

		SpanLabelView view = new SpanLabelView(viewName, generator, ta, score,
				true);

		for (Span span : labels) {

			int tokenId = ta.getTokenIdFromCharacterOffset(span.getStart());
			//System.out.println("char>>" + spanLabeling.rawText.substring(span.getStart(), span.getEnding()));
			
			int endTokenId = ta
					.getTokenIdFromCharacterOffset(span.getEnding() - 1);

			view.addSpanLabel(tokenId, endTokenId + 1, span.getLabel(),
					span.getScore());

			if (span.isSetAttributes() && span.getAttributes().size() > 0) {

				Constituent newConstituent = view.getConstituentsCoveringSpan(
						tokenId, endTokenId + 1).get(0);

				if (span.isSetAttributes()) {
					for (String attribKey : span.getAttributes().keySet()) {
						newConstituent.addAttribute(attribKey, span
								.getAttributes().get(attribKey));
					}
				}
				//System.out.println("token>>" +newConstituent);
			}
		}
		return view;
	}

	// FIXME: we should use the same attention procedure for IC and ACE, but I
	// (Ming-Wei) do not know how to do that.
	/**
	 * @return
	 * @throws TException
	 * @throws AnnotationFailedException
	 * @throws ServiceUnavailableException
	 * 
	 */
	private static Document annotateICText(CleanICDoc doc) {
		ArrayList<String> rawTexts = doc.getRawText();
		StringBuffer buf = new StringBuffer();
		for (String t : rawTexts) {
			buf.append(t);
			buf.append(" ");
		}
		String rawText = buf.toString();
		System.out.println(rawText);
		System.out.println();

		HashMap<Pair<Integer, Integer>, Mention> mentions = doc.getMentions();
		for (Pair<Integer, Integer> m : mentions.keySet()) {
			Mention mention = mentions.get(m);
			System.out.println("("
					+ m.getFirst()
					+ ","
					+ m.getSecond()
					+ ") "
					+ rawText.substring(mention.getStartCharOffset(),
							mention.getEndCharOffset() + 1) + " - "
					+ rawText.substring(m.getFirst(), m.getSecond() + 1));
		}

		String cleanText;
		try {
			cleanText = doc.cleanRawText();
		} catch (Exception e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
			return null;
		}

		System.out.println("Clean text: " + cleanText);

		try {
			boolean forceUpdate = false;
			TextAnnotation ta = curator.getTextAnnotation(doc.getCorpusId(),
					doc.getId(), cleanText, forceUpdate);
			curator.addStanfordParse(ta, forceUpdate);
			curator.addPOSView(ta, forceUpdate);
			curator.addChunkView(ta, forceUpdate);
			curator.addNamedEntityView(ta, forceUpdate);
			// curator.addNumericalQuantitiesView(ta, forceUpdate);

			// Get POS view
			SpanLabelView posView = (SpanLabelView) ta.getView(ViewNames.POS);
			List<Constituent> cons = posView.getConstituents();
			List<Pair<Integer, Integer>> offsets = TokenAligner
					.getCharacterOffsets(ta, cons);
			if (cons.size() != offsets.size()) {
				throw new Exception();
			}

			// ==========================
			/*
			 * Modifying mention offsets
			 */

			List<Constituent> mentionCons = new ArrayList<Constituent>();

			HashMap<Pair<Integer, Integer>, Mention> cleanMentions = doc
					.getCleanMentions();

			Set<Pair<Integer, Integer>> mKeys = cleanMentions.keySet();
			List<Pair<Integer, Integer>> keys = new ArrayList<Pair<Integer, Integer>>(
					mKeys);
			int n = cons.size();
			boolean flag = false;
			for (int p = 0; p < keys.size(); p++) {
				Pair<Integer, Integer> key = keys.get(p);
				flag = false;
				for (int i = 0; i < n; i++) {
					Pair<Integer, Integer> offset = offsets.get(i);
					int a = key.getFirst().intValue();
					int b = offset.getFirst().intValue();
					if (a == b) {
						int jIdx = -1;
						for (int j = i; j < n; j++) {
							Pair<Integer, Integer> offsetE = offsets.get(j);
							int c = key.getSecond().intValue();
							int d = offsetE.getSecond() - 1;
							if (c == d) {
								flag = true;
								jIdx = j;
								break;
							}
							if (flag == true)
								break;
						}
						if (flag == false) {
							System.out
									.println("ERROR: Unable to find the corresponding end constituent.");
						} else {
							Mention mention = cleanMentions.get(key);
							Constituent newCon = createNewConstituent(i,
									jIdx + 1, Constants.GOLD_IC_MENTION_VIEW,
									mention.getSC(), ta);
							mentionCons.add(newCon);

							// Quang: Adding token offset for the mentions in
							// the
							// relations
							String mId = mention.getId();
							doc.addRelationMentionTokenOffset(mId, i, jIdx + 1);
						}
					}
					if (flag == true)
						break;
				}
			}
			// =================

			// =================
			/*
			 * Add mention view
			 */

			SpanLabelView mentionView = new SpanLabelView(
					Constants.GOLD_IC_MENTION_VIEW, "Default", ta, 1.0, true);

			Constants.sortConstituents(mentionCons);
			for (Constituent mCon : mentionCons) {
				mentionView.addConstituent(mCon);
				mentionView
						.getConstituentsCoveringSpan(mCon.getStartSpan(),
								mCon.getEndSpan()).get(0)
						.addAttribute("SPAN_ATTRIBUTE", "NULL");
			}

			ta.addView(Constants.GOLD_IC_MENTION_VIEW, mentionView);
			// =================

			// =================
			/*
			 * Add relation view
			 */

			PredicateArgumentView pav = getPredicateArgumentView(ta, doc);
			ta.addView(Constants.GOLD_IC_RELATION_VIEW, pav);
			// =================

			// =================
			/*
			 * Create a Document object
			 */

			Document myDoc = new Document(ta);

			return myDoc;

		} catch (Exception e) {
			e.printStackTrace();
			System.out
					.println("Unable to annotate the following text with TextAnnotation:");
			System.out.println(cleanText);
			// System.exit(1);
			return null;
		}
	}

	/**
	 * @param ta
	 * @return
	 */
	private static PredicateArgumentView getPredicateArgumentView(
			TextAnnotation ta, CleanICDoc doc) {
		PredicateArgumentView relationView = new PredicateArgumentView(
				Constants.GOLD_IC_RELATION_VIEW, "GoldStandard", ta, 1.0);
		for (SemanticRelation rel : doc.getRelations()) {

			// Predicate
			// A dummy predicate token (from 0 to 1), which is useless, but we
			// need it to construct a predicate
			TreeSet<Integer> predicateTokens = new TreeSet<Integer>();
			predicateTokens.add(0);
			predicateTokens.add(1);

			Constituent predicate = new Constituent(rel.getCoarseLabel() + ":"
					+ rel.getFineLabel(), 1.0, Constants.GOLD_IC_RELATION_VIEW,
					ta, predicateTokens, true);

			// Arguments
			List<Constituent> args = new ArrayList<Constituent>();
			List<String> relations = new ArrayList<String>();

			TreeSet<Integer> constituentTokens = new TreeSet<Integer>();
			constituentTokens.add(rel.getM1().getStartTokenOffset());
			constituentTokens.add(rel.getM1().getEndTokenOffset());

			Constituent arg = new Constituent(rel.getM1().getSC(), 1.0,
					Constants.GOLD_IC_RELATION_VIEW, ta, constituentTokens,
					true);
			args.add(arg);
			relations.add("m1");

			constituentTokens = new TreeSet<Integer>();
			constituentTokens.add(rel.getM2().getStartTokenOffset());
			constituentTokens.add(rel.getM2().getEndTokenOffset());

			arg = new Constituent(rel.getM2().getSC(), 1.0,
					Constants.GOLD_IC_RELATION_VIEW, ta, constituentTokens,
					true);
			args.add(arg);
			relations.add("m2");

			double[] scoresDoubleArray = new double[relations.size()];
			for (int relationId = 0; relationId < relations.size(); relationId++) {
				scoresDoubleArray[relationId] = 1.0;
			}

			relationView.addPredicateArguments(predicate, args,
					relations.toArray(new String[relations.size()]),
					scoresDoubleArray);
		}
		return relationView;
	}

	private static Constituent createNewConstituent(int start, int end,
			String viewName, String label, TextAnnotation ta) {
		Constituent con = new Constituent(label, viewName, ta, start, end);
		return con;
	}

	/**
	 * @param outDir
	 * @param srcDir
	 * @param xmlDir
	 * @param xmlFile
	 * @param srcFile
	 */
	private static CleanICDoc readICData(String file, String xmlDir,
			String srcDir, String outDir) {

		String xmlFile = xmlDir + "/" + file + ".gui.xml";
		String srcFile = srcDir + "/" + file + ".src.xml";
		CleanICDoc doc = new CleanICDoc();
		doc.setId(file);
		doc.setCorpusId("IC");

		// read relations and mentions from IC xml file.
		CleanTextManager.readRelationAnnotation(xmlFile, doc);

		CleanTextManager.addAnnotationsToFile(srcFile, doc);

		// System.out.println(doc.getRawText());
		for (String s : doc.getAnnotatedText())
			System.out.println(s);
		for (String s : doc.getAnnotatedLines())
			System.out.println(s);
		System.out.println();

		return doc;
	}

	/**
	 * @param args
	 * @throws FileNotFoundException
	 */
	public static void main(String[] args) throws FileNotFoundException {
		// testACEDataReader();
		testICDataReader();

	}

	public static void testACEDataReader() throws FileNotFoundException {
		String filelist = FilePathManager.getProjectRoot()
				+ "/data/ACE05/goodfiles";
		DataLoader loader = new DataLoader();
		List<Document> docs = loader.getACEDocuments(filelist);
		System.out.println("=========");

		MentionDetector detector = new MentionDetector();
		for (Document doc : docs) {
			TextAnnotation ta = doc.ta;
			if (ta == null)
				continue;

			// Labeling mention candidates
			detector.labelMentionCandidates(doc);

			SpanLabelView mentionView = (SpanLabelView) ta
					.getView(Constants.GOLD_ACE_MENTION_VIEW);
			List<Constituent> cons = mentionView.getConstituents();
			System.out.println("Text: " + ta.getText());
			for (Constituent con : cons) {
				String[] tokens = ta.getTokensInSpan(con.getStartSpan(),
						con.getEndSpan());
				String t = new String();
				for (String s : tokens) {
					t += s + " ";
				}
				System.out.println("(" + con.getStartSpan() + ","
						+ con.getEndSpan() + ") >>>" + t + "<<<");
			}

			SpanLabelView candidateView = (SpanLabelView) ta
					.getView(Constants.CANDIDATE_MENTION_VIEW);
			List<Constituent> cands = candidateView.getConstituents();
			System.out.println("--Candidates:");
			for (Constituent con : cands) {
				String[] tokens = ta.getTokensInSpan(con.getStartSpan(),
						con.getEndSpan());
				String t = new String();
				for (String s : tokens) {
					t += s + " ";
				}
				System.out.println("(" + con.getStartSpan() + ","
						+ con.getEndSpan() + ") >>>" + t + "<<<");
			}
		}

		Document myDoc = detector
				.labelMentionCandidates("Bill Gates is my figure. I wish that I can be as rich as him.");
		SpanLabelView candidateView = (SpanLabelView) myDoc.ta
				.getView(Constants.CANDIDATE_MENTION_VIEW);
		List<Constituent> cands = candidateView.getConstituents();
		System.out.println("--Candidates:");
		for (Constituent con : cands) {
			String[] tokens = myDoc.ta.getTokensInSpan(con.getStartSpan(),
					con.getEndSpan());
			String t = new String();
			for (String s : tokens) {
				t += s + " ";
			}
			System.out.println("(" + con.getStartSpan() + ","
					+ con.getEndSpan() + ") >>>" + t + "<<<");
		}
	}

	public static void testICDataReader() {
		String filelist = FilePathManager.getProjectRoot()
				+ "/data/IC/smallfilelist";
		String xmlDir = FilePathManager.getProjectRoot() + "/data/IC/gui_xml/";
		String srcDir = FilePathManager.getProjectRoot() + "/data/IC/src_xml/";
		String outDir = FilePathManager.getProjectRoot() + "/data/IC/out_dir/";
		DataLoader loader = new DataLoader();
		List<Document> docs = loader.getICDocuments(filelist, xmlDir, srcDir,
				outDir);
		System.out.println("=========");

		MentionDetector detector = new MentionDetector();
		for (Document doc : docs) {
			TextAnnotation ta = doc.ta;
			if (ta == null)
				continue;

			// Labeling mention candidates
			detector.labelMentionCandidates(doc);

			SpanLabelView mentionView = (SpanLabelView) ta
					.getView(Constants.GOLD_IC_MENTION_VIEW);
			List<Constituent> cons = mentionView.getConstituents();
			System.out.println("Text: " + ta.getText());
			for (Constituent con : cons) {
				String[] tokens = ta.getTokensInSpan(con.getStartSpan(),
						con.getEndSpan());
				String t = new String();
				for (String s : tokens) {
					t += s + " ";
				}
				System.out.println("(" + con.getStartSpan() + ","
						+ con.getEndSpan() + ") >>>" + t + "<<<");
			}

			PredicateArgumentView relationView = (PredicateArgumentView) ta
					.getView(Constants.GOLD_IC_RELATION_VIEW);
			List<Constituent> preds = relationView.getPredicates();
			System.out.println("--Relations:");
			for (Constituent pred : preds) {
				System.out.println(pred.getLabel());
				List<Relation> relations = relationView.getArguments(pred);
				for (Relation rel : relations) {
					System.out.println("\t" + rel.getRelationName());
					Constituent tgt = rel.getTarget();
					String[] tokens = ta.getTokensInSpan(tgt.getStartSpan(),
							tgt.getEndSpan());
					String t = new String();
					for (String s : tokens) {
						t += s + " ";
					}
					System.out.println("\t\t" + "(" + tgt.getStartSpan() + ","
							+ tgt.getEndSpan() + ") >>>" + t + "<<< "
							+ tgt.getLabel());
				}
			}

			SpanLabelView candidateView = (SpanLabelView) ta
					.getView(Constants.CANDIDATE_MENTION_VIEW);
			List<Constituent> cands = candidateView.getConstituents();
			System.out.println("--Candidates:");
			for (Constituent con : cands) {
				String[] tokens = ta.getTokensInSpan(con.getStartSpan(),
						con.getEndSpan());
				String t = new String();
				for (String s : tokens) {
					t += s + " ";
				}
				System.out.println("(" + con.getStartSpan() + ","
						+ con.getEndSpan() + ") >>>" + t + "<<<");
			}
		}

		Document myDoc = detector
				.labelMentionCandidates("Bill Gates is my figure. I wish that I can be as rich as him.");
		SpanLabelView candidateView = (SpanLabelView) myDoc.ta
				.getView(Constants.CANDIDATE_MENTION_VIEW);
		List<Constituent> cands = candidateView.getConstituents();
		System.out.println("--Candidates:");
		for (Constituent con : cands) {
			String[] tokens = myDoc.ta.getTokensInSpan(con.getStartSpan(),
					con.getEndSpan());
			String t = new String();
			for (String s : tokens) {
				t += s + " ";
			}
			System.out.println("(" + con.getStartSpan() + ","
					+ con.getEndSpan() + ") >>>" + t + "<<<");
		}
	}
}

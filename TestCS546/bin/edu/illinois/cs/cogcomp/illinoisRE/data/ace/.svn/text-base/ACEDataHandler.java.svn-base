/**
 * 
 */
package edu.illinois.cs.cogcomp.illinoisRE.data.ace;

import java.io.BufferedReader;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import edu.illinois.cs.cogcomp.core.datastructures.Pair;
import edu.illinois.cs.cogcomp.edison.data.curator.TokenAligner;
import edu.illinois.cs.cogcomp.edison.sentences.Constituent;
import edu.illinois.cs.cogcomp.edison.sentences.SpanLabelView;
import edu.illinois.cs.cogcomp.edison.sentences.TextAnnotation;
import edu.illinois.cs.cogcomp.illinoisRE.common.Constants;
import edu.illinois.cs.cogcomp.illinoisRE.common.Document;
import edu.illinois.cs.cogcomp.illinoisRE.common.IOManager;
import edu.illinois.cs.cogcomp.illinoisRE.main.FilePathManager;
import edu.illinois.cs.cogcomp.thrift.base.Labeling;
import edu.illinois.cs.cogcomp.thrift.base.Span;

/**
 * @author dxquang Aug 4, 2010
 */
public class ACEDataHandler {

	public static final String TEXT_ANNOTATION = "text";
	public static final String START_ANNOTATION = "start";
	public static final String END_ANNOTATION = "end";


	/**
	 * @param cleanSgm
	 * @return
	 */
	public static String cleanMentionTags(String cleanSgm) {
		StringBuffer text = new StringBuffer(cleanSgm);
		int p = text.indexOf("<m_");
		while (p != -1) {
			int p1 = text.indexOf(">", p + 1);
			text = text.delete(p, p1 + 1);
			p = text.indexOf("<m_");
		}
		p = text.indexOf("</m_");
		while (p != -1) {
			int p1 = text.indexOf(">", p + 1);
			text = text.delete(p, p1 + 1);
			p = text.indexOf("</m_");
		}
		return text.toString();
	}

	/**
	 * @param cleanSgm
	 * @return
	 */
	public static List<Ace05Mention> getMentionsFromMentionTags(String cleanSgm) {
		List<Ace05Mention> mentions = new ArrayList<Ace05Mention>();
		StringBuffer sb = new StringBuffer(cleanSgm);

		List<Pair<Pair<Integer, Integer>, String>> listSpans = new ArrayList<Pair<Pair<Integer, Integer>, String>>();
		int pB = sb.indexOf("<m_");
		while (pB != -1) {
			int pBE = sb.indexOf(">", pB + 1);
			StringBuffer sID = new StringBuffer(sb.substring(pB, pBE + 1));
			sID.insert(1, '/');
			int pE = sb.indexOf(sID.toString(), pB + 1);
			Pair<Integer, Integer> pair = new Pair<Integer, Integer>(pB, pE);

			int pP = sb.indexOf("_", pB + 1);
			int pPP = sb.indexOf("_", pP + 1);
			String type = sb.substring(pP + 1, pPP);

			listSpans.add(new Pair<Pair<Integer, Integer>, String>(pair, type));
			pB = sb.indexOf("<m_", pB + 1);
		}

		pB = sb.indexOf("<m_");
		while (pB != -1) {
			int pBE = sb.indexOf(">", pB + 1);
			sb.delete(pB, pBE + 1);
			int len = pBE + 1 - pB;
			for (int i = 0; i < listSpans.size(); i++) {
				Pair<Integer, Integer> pair = listSpans.get(i).getFirst();
				if (pair.getFirst() > pB) {
					pair.setFirst(pair.getFirst() - len);
				}
				if (pair.getSecond() > pB) {
					pair.setSecond(pair.getSecond() - len);
				}
			}
			pB = sb.indexOf("<m_");
		}

		pB = sb.indexOf("</m_");
		while (pB != -1) {
			int pBE = sb.indexOf(">", pB + 1);
			sb.delete(pB, pBE + 1);
			int len = pBE + 1 - pB;
			for (int i = 0; i < listSpans.size(); i++) {
				Pair<Integer, Integer> pair = listSpans.get(i).getFirst();
				if (pair.getFirst() > pB) {
					pair.setFirst(pair.getFirst() - len);
				}
				if (pair.getSecond() > pB) {
					pair.setSecond(pair.getSecond() - len);
				}
			}
			pB = sb.indexOf("</m_");
		}

		for (Pair<Pair<Integer, Integer>, String> pair : listSpans) {
			Ace05Mention m = new Ace05Mention();
			m.startExtent = pair.getFirst().getFirst();
			m.endExtent = pair.getFirst().getSecond();
			m.type = pair.getSecond();
			mentions.add(m);
		}

		return mentions;
	}

	public static List<Ace05Mention> getHeadMentionsFromMentionTags(String cleanSgm) {
		List<Ace05Mention> mentions = new ArrayList<Ace05Mention>();
		StringBuffer sb = new StringBuffer(cleanSgm);

		List<Pair<Integer, Integer>> listSpans = new ArrayList<Pair<Integer, Integer>>();
		int pB = sb.indexOf("<m_");
		while (pB != -1) {
			int pBE = sb.indexOf(">", pB + 1);
			StringBuffer sID = new StringBuffer(sb.substring(pB, pBE + 1));
			sID.insert(1, '/');
			int pE = sb.indexOf(sID.toString(), pB + 1);
			Pair<Integer, Integer> pair = new Pair<Integer, Integer>(pB, pE);
			listSpans.add(pair);
			pB = sb.indexOf("<m_", pB + 1);
		}

		pB = sb.indexOf("<m_");
		while (pB != -1) {
			int pBE = sb.indexOf(">", pB + 1);
			sb.delete(pB, pBE + 1);
			int len = pBE + 1 - pB;
			for (Pair<Integer, Integer> pair : listSpans) {
				if (pair.getFirst() > pB) {
					pair.setFirst(pair.getFirst() - len);
				}
				if (pair.getSecond() > pB) {
					pair.setSecond(pair.getSecond() - len);
				}
			}
			pB = sb.indexOf("<m_");
		}

		pB = sb.indexOf("</m_");
		while (pB != -1) {
			int pBE = sb.indexOf(">", pB + 1);
			sb.delete(pB, pBE + 1);
			int len = pBE + 1 - pB;
			for (Pair<Integer, Integer> pair : listSpans) {
				if (pair.getFirst() > pB) {
					pair.setFirst(pair.getFirst() - len);
				}
				if (pair.getSecond() > pB) {
					pair.setSecond(pair.getSecond() - len);
				}
			}
			pB = sb.indexOf("</m_");
		}

		for (Pair<Integer, Integer> pair : listSpans) {
			Ace05Mention m = new Ace05Mention();
			m.startExtent = pair.getFirst();
			m.endExtent = pair.getSecond();
			mentions.add(m);
		}

		return mentions;
	}

	/**
	 * @param mentions
	 * @param i
	 */
	public static void modifyOffset(List<Ace05Mention> mentions, int i) {
		Ace05Mention iMention = mentions.get(i);
		int iB = iMention.startExtent;
		int iE = iMention.endExtent;
		int iEhead = iMention.endHead;

		String b = "<m_" + iMention.type + "_" + iMention.id + "_m>";
		int nB = b.length();
		String e = "</m_" + iMention.type + "_" + iMention.id + "_m>";
		int nE = e.length();

		int n = mentions.size();
		int j = i + 1;
		while (j < n) {
			Ace05Mention jMention = mentions.get(j);
			int jB = jMention.startExtent;
			int jE = jMention.endExtent;
			int jEhead = jMention.endHead;
			if (jB > iB) {
				if (jB > iE) {
					jMention.startExtent = jB + nB + nE;
				} else {
					jMention.startExtent = jB + nB;
				}
			}
			if (jE > iB) {
				if (jE > iE) {
					jMention.endExtent = jE + nB + nE;
				} else {
					jMention.endExtent = jE + nB;
				}
			}
			if (jEhead > iB) {
				if (jEhead > iEhead) {
					jMention.endHead = jEhead + nB + nE;
				} else {
					jMention.endHead = jEhead + nB;
				}
			}
			j++;
		}
	}

	public static StringBuffer readingSgmFile(String sgmFile) {
		BufferedReader reader = IOManager.openReader(sgmFile);

		String line = "";
		StringBuffer sgm = new StringBuffer("");

		try {
			while ((line = reader.readLine()) != null) {
				sgm.append(line);
				sgm.append(" ");
			}
		} catch (IOException e) {
			System.out.println("ERROR: Unable to read data from " + sgmFile);
			e.printStackTrace();
			System.exit(1);
		}
		return sgm;
	}

	public static String removeXMLTags(StringBuffer sgm) {
		String s = sgm.toString();

		for (String tag : Constants.setXMLTags) {

			// Dealing with "TEXT" later. This is for stripping off the junks
			// before the "TEXT" tag.
			if (tag.equals("TEXT"))
				continue;

			s = s.replaceAll("<" + tag + ".*?>", "");
			s = s.replaceAll("</" + tag + ">", "");
		}

		int pos = s.indexOf("<TEXT>");

		s = s.replaceAll("<" + "TEXT" + ".*?>", "");
		s = s.replaceAll("</" + "TEXT" + ">", "");

		String subBegin = s.substring(0, pos);
		String subAfter = s.substring(pos);

		subBegin = subBegin.replaceAll(".", " ");

		s = subBegin + subAfter;

		return s;
	}

	public static List<Ace05Mention> analyzeAnnotatedLines(
			ArrayList<String> arrAnnotatedLines) {

		List<Ace05Mention> mentions = new ArrayList<Ace05Mention>();

		int n = arrAnnotatedLines.size();

		int i = 0;

		boolean startEntity = false;
		boolean startMention = false;
		boolean startExtent = false;
		boolean startExtentCharseq = false;
		boolean startHead = false;
		boolean startHeadCharseq = false;

		String entityType = "";
		String mentionType = "";
		String extentCharseq = "";
		String headCharseq = "";
		String mentionId = "";

		Ace05Mention mention = null;
		while (i < n) {

			String line = arrAnnotatedLines.get(i);

			if (line.startsWith("<entity ID")) {
				startEntity = true;
				entityType = getFieldValue(line, "TYPE");
			} else if (line.startsWith("</entity>") && startEntity == true) {
				startEntity = false;
			}

			else if (line.startsWith("<entity_mention ") && startEntity == true) {
				startMention = true;
				// mentionType = getFieldValue(line, "TYPE");
				mentionType = entityType;
				mentionId = getFieldValue(line, "ID");
				mention = new Ace05Mention();
				mention.type = mentionType;
				mention.id = mentionId;
			} else if (line.startsWith("</entity_mention>")
					&& startMention == true) {
				startMention = false;
				mentions.add(mention);
				mention = new Ace05Mention();
			}

			else if (line.startsWith("<extent>") && startMention == true) {
				startExtent = true;
			} else if (line.startsWith("</extent>") && startExtent == true) {
				startExtent = false;
			}

			else if (line.startsWith("<charseq ") && startExtent == true) {
				startExtentCharseq = true;
			}

			else if (line.startsWith("<head>") && startMention == true) {
				startHead = true;
			} else if (line.startsWith("</head>") && startHead == true) {
				startHead = false;
			}

			else if (line.startsWith("<charseq ") && startHead == true) {
				startHeadCharseq = true;
			}

			if (startExtentCharseq == true) {
				extentCharseq += line + " ";
			}

			if (startHeadCharseq == true) {
				headCharseq += line + " ";
			}

			if (line.endsWith("</charseq>") && startExtentCharseq == true) {
				startExtentCharseq = false;
				Map<String, String> charseqInfo = getCharSeqInfo(extentCharseq
						.trim(), "charseq", "START", "END");
				mention.extent = charseqInfo.get(TEXT_ANNOTATION);
				mention.startExtent = Integer.parseInt(charseqInfo
						.get(START_ANNOTATION));
				mention.endExtent = Integer.parseInt(charseqInfo
						.get(END_ANNOTATION));
				extentCharseq = "";
			}

			if (line.endsWith("</charseq>") && startHeadCharseq == true) {
				startHeadCharseq = false;
				Map<String, String> charseqInfo = getCharSeqInfo(headCharseq
						.trim(), "charseq", "START", "END");
				mention.head = charseqInfo.get(TEXT_ANNOTATION);
				mention.startHead = Integer.parseInt(charseqInfo
						.get(START_ANNOTATION));
				mention.endHead = Integer.parseInt(charseqInfo
						.get(END_ANNOTATION));
				headCharseq = "";
			}

			i++;
		}

		return mentions;
	}

	private static Map<String, String> getCharSeqInfo(String xmlString,
			String textKey, String startKey, String endKey) {

		Map<String, String> map = new HashMap<String, String>();

		String text = getXMLValue(xmlString, textKey);
		String start = getFieldValue(xmlString, startKey);
		String end = getFieldValue(xmlString, endKey);

		map.put(TEXT_ANNOTATION, text);
		map.put(START_ANNOTATION, start);
		map.put(END_ANNOTATION, end);

		return map;
	}

	public static void sortAce05MentionAsc(List<Ace05Mention> mentions) {
		Collections.sort(mentions, new Comparator<Ace05Mention>() {
			public int compare(Ace05Mention arg0, Ace05Mention arg1) {
				if (arg0.startExtent > arg1.startExtent)
					return 1;
				else if (arg0.startExtent == arg1.startExtent
						&& arg0.endExtent < arg1.startExtent)
					return 1;
				else if (arg0.startExtent == arg1.startExtent
						&& arg0.endExtent == arg1.endExtent)
					return 0;
				else
					return -1;
			}
		});
	}

	public static void sortAce05MentionDes(List<Ace05Mention> mentions) {
		Collections.sort(mentions, new Comparator<Ace05Mention>() {
			public int compare(Ace05Mention arg0, Ace05Mention arg1) {
				if (arg0.startExtent < arg1.startExtent)
					return 1;
				else if (arg0.startExtent == arg1.startExtent
						&& arg0.endExtent > arg1.startExtent)
					return 1;
				else if (arg0.startExtent == arg1.startExtent
						&& arg0.endExtent == arg1.endExtent)
					return 0;
				else
					return -1;
			}
		});
	}

	private static String getXMLValue(String inputString, String key) {

		int pos = inputString.indexOf("<" + key);

		if (pos == -1) {
			System.out.println("ERROR: Unable to find " + key
					+ " in the input string.");
			System.out.println("Input string = " + inputString);
			System.exit(1);
		}

		int pos1 = inputString.indexOf(">", pos + 1);
		int pos2 = inputString.indexOf("</" + key + ">");
		String value = inputString.substring(pos1 + 1, pos2);

		return value.trim();
	}

	private static String getFieldValue(String line, String key) {
		int pos = line.indexOf(key);

		if (pos == -1) {
			System.out.println("ERROR: Unable to get value of the key " + key);
			System.out.println("Line = " + line);
			System.exit(1);
		}

		int pos1 = line.indexOf("\"", pos);
		int pos2 = line.indexOf("\"", pos1 + 1);

		if (pos1 == -1 || pos2 == -1) {
			System.out.println("ERROR: Unable to get value of the key " + key);
			System.out.println("Line = " + line);
			System.exit(1);
		}

		String value = line.substring(pos1 + 1, pos2);

		return value;
	}

//	public static void main(String[] args) {
//		ACEDataHandler labeler = new ACEDataHandler();
//		labeler
//				.annotateMultipleFiles("/Users/dxquang/tmp/mentiondetection/masterfile");
//	}

}
